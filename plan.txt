
Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  [32m+[0m create[0m
 [36m<=[0m read (data resources)[0m

Terraform will perform the following actions:

[1m  # module.glue.data.aws_secretsmanager_secret_version.db1_credentials[0m will be read during apply
  # (depends on a resource or a module with changes pending)
[0m [36m<=[0m[0m data "aws_secretsmanager_secret_version" "db1_credentials" {
      [32m+[0m[0m arn            = (known after apply)
      [32m+[0m[0m created_date   = (known after apply)
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m secret_binary  = (sensitive value)
      [32m+[0m[0m secret_id      = "db1-credentials"
      [32m+[0m[0m secret_string  = (sensitive value)
      [32m+[0m[0m version_id     = (known after apply)
      [32m+[0m[0m version_stages = (known after apply)
    }

[1m  # module.glue.data.aws_secretsmanager_secret_version.db2_credentials[0m will be read during apply
  # (depends on a resource or a module with changes pending)
[0m [36m<=[0m[0m data "aws_secretsmanager_secret_version" "db2_credentials" {
      [32m+[0m[0m arn            = (known after apply)
      [32m+[0m[0m created_date   = (known after apply)
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m secret_binary  = (sensitive value)
      [32m+[0m[0m secret_id      = "db2-credentials"
      [32m+[0m[0m secret_string  = (sensitive value)
      [32m+[0m[0m version_id     = (known after apply)
      [32m+[0m[0m version_stages = (known after apply)
    }

[1m  # module.glue.data.aws_subnet.selected[0m will be read during apply
  # (config refers to values not yet known)
[0m [36m<=[0m[0m data "aws_subnet" "selected" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = (known after apply)
      [32m+[0m[0m availability_zone                              = (known after apply)
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m available_ip_address_count                     = (known after apply)
      [32m+[0m[0m cidr_block                                     = (known after apply)
      [32m+[0m[0m customer_owned_ipv4_pool                       = (known after apply)
      [32m+[0m[0m default_for_az                                 = (known after apply)
      [32m+[0m[0m enable_dns64                                   = (known after apply)
      [32m+[0m[0m enable_lni_at_device_index                     = (known after apply)
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = (known after apply)
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = (known after apply)
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block                                = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = (known after apply)
      [32m+[0m[0m map_customer_owned_ip_on_launch                = (known after apply)
      [32m+[0m[0m map_public_ip_on_launch                        = (known after apply)
      [32m+[0m[0m outpost_arn                                    = (known after apply)
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m state                                          = (known after apply)
      [32m+[0m[0m tags                                           = (known after apply)
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # module.glue.aws_glue_catalog_database.main[0m will be created
[0m  [32m+[0m[0m resource "aws_glue_catalog_database" "main" {
      [32m+[0m[0m arn          = (known after apply)
      [32m+[0m[0m catalog_id   = (known after apply)
      [32m+[0m[0m id           = (known after apply)
      [32m+[0m[0m location_uri = (known after apply)
      [32m+[0m[0m name         = "catalogo-db"
      [32m+[0m[0m tags         = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "catalogo-db"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m tags_all     = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "catalogo-db"
          [32m+[0m[0m "Terraform"   = "true"
        }

      [32m+[0m[0m create_table_default_permission (known after apply)
    }

[1m  # module.glue.aws_glue_connection.db1[0m will be created
[0m  [32m+[0m[0m resource "aws_glue_connection" "db1" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m catalog_id            = (known after apply)
      [32m+[0m[0m connection_properties = (sensitive value)
      [32m+[0m[0m connection_type       = "JDBC"
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m name                  = "db1-connection"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "db1-connection"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "db1-connection"
          [32m+[0m[0m "Terraform"   = "true"
        }

      [32m+[0m[0m physical_connection_requirements {
          [32m+[0m[0m availability_zone      = (known after apply)
          [32m+[0m[0m security_group_id_list = (known after apply)
          [32m+[0m[0m subnet_id              = (known after apply)
        }
    }

[1m  # module.glue.aws_glue_connection.db2[0m will be created
[0m  [32m+[0m[0m resource "aws_glue_connection" "db2" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m catalog_id            = (known after apply)
      [32m+[0m[0m connection_properties = (sensitive value)
      [32m+[0m[0m connection_type       = "JDBC"
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m name                  = "db2-connection"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "db2-connection"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "db2-connection"
          [32m+[0m[0m "Terraform"   = "true"
        }

      [32m+[0m[0m physical_connection_requirements {
          [32m+[0m[0m availability_zone      = (known after apply)
          [32m+[0m[0m security_group_id_list = (known after apply)
          [32m+[0m[0m subnet_id              = (known after apply)
        }
    }

[1m  # module.glue.aws_glue_connection.redshift[0m will be created
[0m  [32m+[0m[0m resource "aws_glue_connection" "redshift" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m catalog_id            = (known after apply)
      [32m+[0m[0m connection_properties = (sensitive value)
      [32m+[0m[0m connection_type       = "JDBC"
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m name                  = "redshift-connection"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "redshift-connection"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "redshift-connection"
          [32m+[0m[0m "Terraform"   = "true"
        }

      [32m+[0m[0m physical_connection_requirements {
          [32m+[0m[0m availability_zone      = (known after apply)
          [32m+[0m[0m security_group_id_list = (known after apply)
          [32m+[0m[0m subnet_id              = (known after apply)
        }
    }

[1m  # module.glue.aws_glue_crawler.main[0m will be created
[0m  [32m+[0m[0m resource "aws_glue_crawler" "main" {
      [32m+[0m[0m arn           = (known after apply)
      [32m+[0m[0m database_name = "catalogo-db"
      [32m+[0m[0m id            = (known after apply)
      [32m+[0m[0m name          = "redshift-crawler"
      [32m+[0m[0m role          = (known after apply)
      [32m+[0m[0m tags          = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "redshift-crawler"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m tags_all      = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "redshift-crawler"
          [32m+[0m[0m "Terraform"   = "true"
        }

      [32m+[0m[0m s3_target {
          [32m+[0m[0m path = "s3://mvp-staging-bucket/staging"
        }
    }

[1m  # module.glue.aws_glue_job.main[0m will be created
[0m  [32m+[0m[0m resource "aws_glue_job" "main" {
      [32m+[0m[0m arn               = (known after apply)
      [32m+[0m[0m connections       = [
          [32m+[0m[0m "db1-connection",
          [32m+[0m[0m "db2-connection",
          [32m+[0m[0m "redshift-connection",
        ]
      [32m+[0m[0m default_arguments = {
          [32m+[0m[0m "--TempDir"                          = "s3://mvp-staging-bucket/temporary/"
          [32m+[0m[0m "--continuous-log-logGroup"          = "/aws/glue/jobs"
          [32m+[0m[0m "--enable-continuous-cloudwatch-log" = "true"
          [32m+[0m[0m "--enable-job-insights"              = "true"
          [32m+[0m[0m "--enable-metrics"                   = "true"
          [32m+[0m[0m "--enable-spark-ui"                  = "true"
          [32m+[0m[0m "--job-bookmark-option"              = "job-bookmark-enable"
          [32m+[0m[0m "--job-language"                     = "python"
          [32m+[0m[0m "--output_format"                    = "parquet"
          [32m+[0m[0m "--output_path"                      = "s3://mvp-staging-bucket/staging"
          [32m+[0m[0m "--spark-event-logs-path"            = "s3://mvp-staging-bucket/spark-logs/"
        }
      [32m+[0m[0m glue_version      = "3.0"
      [32m+[0m[0m id                = (known after apply)
      [32m+[0m[0m max_capacity      = (known after apply)
      [32m+[0m[0m max_retries       = 3
      [32m+[0m[0m name              = "redshift-etl"
      [32m+[0m[0m number_of_workers = 2
      [32m+[0m[0m role_arn          = (known after apply)
      [32m+[0m[0m tags              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "redshift-etl"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m tags_all          = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "redshift-etl"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m timeout           = 2880
      [32m+[0m[0m worker_type       = "G.1X"

      [32m+[0m[0m command {
          [32m+[0m[0m name            = "glueetl"
          [32m+[0m[0m python_version  = "3"
          [32m+[0m[0m runtime         = (known after apply)
          [32m+[0m[0m script_location = "s3://mvp-staging-bucket/scripts/etl.py"
        }

      [32m+[0m[0m execution_property {
          [32m+[0m[0m max_concurrent_runs = 2
        }

      [32m+[0m[0m notification_property (known after apply)
    }

[1m  # module.glue.aws_iam_role.glue_role[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "glue_role" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "glue.amazonaws.com"
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "GlueRedshiftRole"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m unique_id             = (known after apply)

      [32m+[0m[0m inline_policy (known after apply)
    }

[1m  # module.glue.aws_iam_role_policy.glue_s3_access[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy" "glue_s3_access" {
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = "glue-s3-access"
      [32m+[0m[0m name_prefix = (known after apply)
      [32m+[0m[0m policy      = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "s3:GetObject",
                          [32m+[0m[0m "s3:PutObject",
                          [32m+[0m[0m "s3:DeleteObject",
                          [32m+[0m[0m "s3:ListBucket",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:s3:::mvp-staging-bucket",
                          [32m+[0m[0m "arn:aws:s3:::mvp-staging-bucket/*",
                        ]
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m role        = (known after apply)
    }

[1m  # module.glue.aws_iam_role_policy_attachment.glue_service[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "glue_service" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole"
      [32m+[0m[0m role       = "GlueRedshiftRole"
    }

[1m  # module.monitoring.aws_cloudwatch_dashboard.main[0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_dashboard" "main" {
      [32m+[0m[0m dashboard_arn  = (known after apply)
      [32m+[0m[0m dashboard_body = (known after apply)
      [32m+[0m[0m dashboard_name = "ServerlessInfrastructure"
      [32m+[0m[0m id             = (known after apply)
    }

[1m  # module.monitoring.aws_cloudwatch_log_group.glue_logs[0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_log_group" "glue_logs" {
      [32m+[0m[0m arn               = (known after apply)
      [32m+[0m[0m id                = (known after apply)
      [32m+[0m[0m kms_key_id        = (known after apply)
      [32m+[0m[0m log_group_class   = (known after apply)
      [32m+[0m[0m name              = "/aws/glue/jobs"
      [32m+[0m[0m name_prefix       = (known after apply)
      [32m+[0m[0m retention_in_days = 30
      [32m+[0m[0m skip_destroy      = false
      [32m+[0m[0m tags              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "glue-jobs-logs"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m tags_all          = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "glue-jobs-logs"
          [32m+[0m[0m "Terraform"   = "true"
        }
    }

[1m  # module.monitoring.aws_cloudwatch_log_group.vpc_flow_logs[0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_log_group" "vpc_flow_logs" {
      [32m+[0m[0m arn               = (known after apply)
      [32m+[0m[0m id                = (known after apply)
      [32m+[0m[0m kms_key_id        = (known after apply)
      [32m+[0m[0m log_group_class   = (known after apply)
      [32m+[0m[0m name              = (known after apply)
      [32m+[0m[0m name_prefix       = (known after apply)
      [32m+[0m[0m retention_in_days = 30
      [32m+[0m[0m skip_destroy      = false
      [32m+[0m[0m tags              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "vpc-flow-logs"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m tags_all          = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "vpc-flow-logs"
          [32m+[0m[0m "Terraform"   = "true"
        }
    }

[1m  # module.monitoring.aws_cloudwatch_metric_alarm.redshift_cpu[0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_metric_alarm" "redshift_cpu" {
      [32m+[0m[0m actions_enabled                       = true
      [32m+[0m[0m alarm_actions                         = (known after apply)
      [32m+[0m[0m alarm_description                     = "This metric monitors Redshift CPU utilization"
      [32m+[0m[0m alarm_name                            = "redshift-high-cpu"
      [32m+[0m[0m arn                                   = (known after apply)
      [32m+[0m[0m comparison_operator                   = "GreaterThanThreshold"
      [32m+[0m[0m dimensions                            = (known after apply)
      [32m+[0m[0m evaluate_low_sample_count_percentiles = (known after apply)
      [32m+[0m[0m evaluation_periods                    = 2
      [32m+[0m[0m id                                    = (known after apply)
      [32m+[0m[0m metric_name                           = "CPUUtilization"
      [32m+[0m[0m namespace                             = "AWS/RedshiftServerless"
      [32m+[0m[0m ok_actions                            = (known after apply)
      [32m+[0m[0m period                                = 300
      [32m+[0m[0m statistic                             = "Average"
      [32m+[0m[0m tags                                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "redshift-cpu-alarm"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m tags_all                              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "redshift-cpu-alarm"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m threshold                             = 80
      [32m+[0m[0m treat_missing_data                    = "missing"
    }

[1m  # module.monitoring.aws_cloudwatch_metric_alarm.redshift_storage[0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_metric_alarm" "redshift_storage" {
      [32m+[0m[0m actions_enabled                       = true
      [32m+[0m[0m alarm_actions                         = (known after apply)
      [32m+[0m[0m alarm_description                     = "This metric monitors Redshift storage usage"
      [32m+[0m[0m alarm_name                            = "redshift-storage-usage"
      [32m+[0m[0m arn                                   = (known after apply)
      [32m+[0m[0m comparison_operator                   = "GreaterThanThreshold"
      [32m+[0m[0m dimensions                            = (known after apply)
      [32m+[0m[0m evaluate_low_sample_count_percentiles = (known after apply)
      [32m+[0m[0m evaluation_periods                    = 1
      [32m+[0m[0m id                                    = (known after apply)
      [32m+[0m[0m metric_name                           = "StorageUsage"
      [32m+[0m[0m namespace                             = "AWS/RedshiftServerless"
      [32m+[0m[0m ok_actions                            = (known after apply)
      [32m+[0m[0m period                                = 300
      [32m+[0m[0m statistic                             = "Average"
      [32m+[0m[0m tags                                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "redshift-storage-alarm"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m tags_all                              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "redshift-storage-alarm"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m threshold                             = 80
      [32m+[0m[0m treat_missing_data                    = "missing"
    }

[1m  # module.monitoring.aws_sns_topic.alerts[0m will be created
[0m  [32m+[0m[0m resource "aws_sns_topic" "alerts" {
      [32m+[0m[0m arn                         = (known after apply)
      [32m+[0m[0m beginning_archive_time      = (known after apply)
      [32m+[0m[0m content_based_deduplication = false
      [32m+[0m[0m fifo_topic                  = false
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m kms_master_key_id           = (known after apply)
      [32m+[0m[0m name                        = "monitoring-alerts"
      [32m+[0m[0m name_prefix                 = (known after apply)
      [32m+[0m[0m owner                       = (known after apply)
      [32m+[0m[0m policy                      = (known after apply)
      [32m+[0m[0m signature_version           = (known after apply)
      [32m+[0m[0m tags                        = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "monitoring-alerts"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m tags_all                    = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "monitoring-alerts"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m tracing_config              = (known after apply)
    }

[1m  # module.networking.aws_cloudwatch_log_group.flow_log_group[0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_log_group" "flow_log_group" {
      [32m+[0m[0m arn               = (known after apply)
      [32m+[0m[0m id                = (known after apply)
      [32m+[0m[0m log_group_class   = (known after apply)
      [32m+[0m[0m name              = "/aws/vpc/flow-log"
      [32m+[0m[0m name_prefix       = (known after apply)
      [32m+[0m[0m retention_in_days = 30
      [32m+[0m[0m skip_destroy      = false
      [32m+[0m[0m tags              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "vpc-flow-log-group"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m tags_all          = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "vpc-flow-log-group"
          [32m+[0m[0m "Terraform"   = "true"
        }
    }

[1m  # module.networking.aws_customer_gateway.main[0m will be created
[0m  [32m+[0m[0m resource "aws_customer_gateway" "main" {
      [32m+[0m[0m arn        = (known after apply)
      [32m+[0m[0m bgp_asn    = "65000"
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m ip_address = "1.2.3.4"
      [32m+[0m[0m tags       = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "main-customer-gateway"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m tags_all   = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "main-customer-gateway"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m type       = "ipsec.1"
    }

[1m  # module.networking.aws_flow_log.vpc_flow_log[0m will be created
[0m  [32m+[0m[0m resource "aws_flow_log" "vpc_flow_log" {
      [32m+[0m[0m arn                      = (known after apply)
      [32m+[0m[0m iam_role_arn             = (known after apply)
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m log_destination          = (known after apply)
      [32m+[0m[0m log_destination_type     = "cloud-watch-logs"
      [32m+[0m[0m log_format               = (known after apply)
      [32m+[0m[0m log_group_name           = (known after apply)
      [32m+[0m[0m max_aggregation_interval = 600
      [32m+[0m[0m tags                     = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "vpc-flow-log"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m tags_all                 = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "vpc-flow-log"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m traffic_type             = "ALL"
      [32m+[0m[0m vpc_id                   = (known after apply)
    }

[1m  # module.networking.aws_iam_role.vpc_flow_log_role[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "vpc_flow_log_role" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "vpc-flow-logs.amazonaws.com"
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "vpc-flow-log-role"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m unique_id             = (known after apply)

      [32m+[0m[0m inline_policy (known after apply)
    }

[1m  # module.networking.aws_iam_role_policy.vpc_flow_log_policy[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy" "vpc_flow_log_policy" {
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = "vpc-flow-log-policy"
      [32m+[0m[0m name_prefix = (known after apply)
      [32m+[0m[0m policy      = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "logs:CreateLogGroup",
                          [32m+[0m[0m "logs:CreateLogStream",
                          [32m+[0m[0m "logs:PutLogEvents",
                          [32m+[0m[0m "logs:DescribeLogGroups",
                          [32m+[0m[0m "logs:DescribeLogStreams",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "*"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m role        = (known after apply)
    }

[1m  # module.networking.aws_route_table.main[0m will be created
[0m  [32m+[0m[0m resource "aws_route_table" "main" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m owner_id         = (known after apply)
      [32m+[0m[0m propagating_vgws = (known after apply)
      [32m+[0m[0m route            = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_block                 = "172.16.0.0/16"
              [32m+[0m[0m gateway_id                 = (known after apply)
                [90m# (11 unchanged attributes hidden)[0m[0m
            },
        ]
      [32m+[0m[0m tags             = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "main-route-table"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m tags_all         = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "main-route-table"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m vpc_id           = (known after apply)
    }

[1m  # module.networking.aws_route_table_association.main[0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "main" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.networking.aws_security_group.redshift[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "redshift" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "Security group for Redshift Serverless"
      [32m+[0m[0m egress                 = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "10.0.0.0/16",
                ]
              [32m+[0m[0m description      = "Allow outbound traffic within VPC"
              [32m+[0m[0m from_port        = 0
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "-1"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 0
            },
        ]
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = []
              [32m+[0m[0m description      = "Allow Redshift access from Glue"
              [32m+[0m[0m from_port        = 5439
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = (known after apply)
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 5439
            },
        ]
      [32m+[0m[0m name                   = "redshift-security-group"
      [32m+[0m[0m name_prefix            = (known after apply)
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "redshift-sg"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "redshift-sg"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m vpc_id                 = (known after apply)
    }

[1m  # module.networking.aws_subnet.main[0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "main" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "sa-east-1a"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.1.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = false
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "main-subnet"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "main-subnet"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # module.networking.aws_vpc.vpc[0m will be created
[0m  [32m+[0m[0m resource "aws_vpc" "vpc" {
      [32m+[0m[0m arn                                  = (known after apply)
      [32m+[0m[0m cidr_block                           = "10.0.0.0/16"
      [32m+[0m[0m default_network_acl_id               = (known after apply)
      [32m+[0m[0m default_route_table_id               = (known after apply)
      [32m+[0m[0m default_security_group_id            = (known after apply)
      [32m+[0m[0m dhcp_options_id                      = (known after apply)
      [32m+[0m[0m enable_dns_hostnames                 = true
      [32m+[0m[0m enable_dns_support                   = true
      [32m+[0m[0m enable_network_address_usage_metrics = (known after apply)
      [32m+[0m[0m id                                   = (known after apply)
      [32m+[0m[0m instance_tenancy                     = "default"
      [32m+[0m[0m ipv6_association_id                  = (known after apply)
      [32m+[0m[0m ipv6_cidr_block                      = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_network_border_group = (known after apply)
      [32m+[0m[0m main_route_table_id                  = (known after apply)
      [32m+[0m[0m owner_id                             = (known after apply)
      [32m+[0m[0m tags                                 = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "main-vpc"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m tags_all                             = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "main-vpc"
          [32m+[0m[0m "Terraform"   = "true"
        }
    }

[1m  # module.networking.aws_vpn_connection.main[0m will be created
[0m  [32m+[0m[0m resource "aws_vpn_connection" "main" {
      [32m+[0m[0m arn                            = (known after apply)
      [32m+[0m[0m core_network_arn               = (known after apply)
      [32m+[0m[0m core_network_attachment_arn    = (known after apply)
      [32m+[0m[0m customer_gateway_configuration = (sensitive value)
      [32m+[0m[0m customer_gateway_id            = (known after apply)
      [32m+[0m[0m enable_acceleration            = (known after apply)
      [32m+[0m[0m id                             = (known after apply)
      [32m+[0m[0m local_ipv4_network_cidr        = (known after apply)
      [32m+[0m[0m local_ipv6_network_cidr        = (known after apply)
      [32m+[0m[0m outside_ip_address_type        = (known after apply)
      [32m+[0m[0m remote_ipv4_network_cidr       = (known after apply)
      [32m+[0m[0m remote_ipv6_network_cidr       = (known after apply)
      [32m+[0m[0m routes                         = (known after apply)
      [32m+[0m[0m static_routes_only             = true
      [32m+[0m[0m tags                           = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "main-vpn-connection"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m tags_all                       = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "main-vpn-connection"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m transit_gateway_attachment_id  = (known after apply)
      [32m+[0m[0m tunnel1_address                = (known after apply)
      [32m+[0m[0m tunnel1_bgp_asn                = (known after apply)
      [32m+[0m[0m tunnel1_bgp_holdtime           = (known after apply)
      [32m+[0m[0m tunnel1_cgw_inside_address     = (known after apply)
      [32m+[0m[0m tunnel1_inside_cidr            = (known after apply)
      [32m+[0m[0m tunnel1_inside_ipv6_cidr       = (known after apply)
      [32m+[0m[0m tunnel1_preshared_key          = (sensitive value)
      [32m+[0m[0m tunnel1_vgw_inside_address     = (known after apply)
      [32m+[0m[0m tunnel2_address                = (known after apply)
      [32m+[0m[0m tunnel2_bgp_asn                = (known after apply)
      [32m+[0m[0m tunnel2_bgp_holdtime           = (known after apply)
      [32m+[0m[0m tunnel2_cgw_inside_address     = (known after apply)
      [32m+[0m[0m tunnel2_inside_cidr            = (known after apply)
      [32m+[0m[0m tunnel2_inside_ipv6_cidr       = (known after apply)
      [32m+[0m[0m tunnel2_preshared_key          = (sensitive value)
      [32m+[0m[0m tunnel2_vgw_inside_address     = (known after apply)
      [32m+[0m[0m tunnel_inside_ip_version       = (known after apply)
      [32m+[0m[0m type                           = "ipsec.1"
      [32m+[0m[0m vgw_telemetry                  = (known after apply)
      [32m+[0m[0m vpn_gateway_id                 = (known after apply)

      [32m+[0m[0m tunnel1_log_options (known after apply)

      [32m+[0m[0m tunnel2_log_options (known after apply)
    }

[1m  # module.networking.aws_vpn_connection_route.db1[0m will be created
[0m  [32m+[0m[0m resource "aws_vpn_connection_route" "db1" {
      [32m+[0m[0m destination_cidr_block = "172.16.1.0/24"
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m vpn_connection_id      = (known after apply)
    }

[1m  # module.networking.aws_vpn_connection_route.db2[0m will be created
[0m  [32m+[0m[0m resource "aws_vpn_connection_route" "db2" {
      [32m+[0m[0m destination_cidr_block = "172.16.2.0/24"
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m vpn_connection_id      = (known after apply)
    }

[1m  # module.networking.aws_vpn_gateway.main[0m will be created
[0m  [32m+[0m[0m resource "aws_vpn_gateway" "main" {
      [32m+[0m[0m amazon_side_asn = (known after apply)
      [32m+[0m[0m arn             = (known after apply)
      [32m+[0m[0m id              = (known after apply)
      [32m+[0m[0m tags            = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "main-vpn-gateway"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m tags_all        = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "main-vpn-gateway"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m vpc_id          = (known after apply)
    }

[1m  # module.redshift.data.aws_secretsmanager_secret_version.admin_credentials[0m will be read during apply
  # (config refers to values not yet known)
[0m [36m<=[0m[0m data "aws_secretsmanager_secret_version" "admin_credentials" {
      [32m+[0m[0m arn            = (known after apply)
      [32m+[0m[0m created_date   = (known after apply)
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m secret_binary  = (sensitive value)
      [32m+[0m[0m secret_id      = (known after apply)
      [32m+[0m[0m secret_string  = (sensitive value)
      [32m+[0m[0m version_id     = (known after apply)
      [32m+[0m[0m version_stages = (known after apply)
    }

[1m  # module.redshift.aws_redshiftserverless_namespace.main[0m will be created
[0m  [32m+[0m[0m resource "aws_redshiftserverless_namespace" "main" {
      [32m+[0m[0m admin_password_secret_arn        = (known after apply)
      [32m+[0m[0m admin_password_secret_kms_key_id = (known after apply)
      [32m+[0m[0m admin_user_password              = (sensitive value)
      [32m+[0m[0m admin_user_password_wo           = (write-only attribute)
      [32m+[0m[0m admin_username                   = (sensitive value)
      [32m+[0m[0m arn                              = (known after apply)
      [32m+[0m[0m db_name                          = "dev"
      [32m+[0m[0m iam_roles                        = (known after apply)
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m kms_key_id                       = (known after apply)
      [32m+[0m[0m namespace_id                     = (known after apply)
      [32m+[0m[0m namespace_name                   = "dwh"
      [32m+[0m[0m tags                             = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "dwh"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m tags_all                         = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "dwh"
          [32m+[0m[0m "Terraform"   = "true"
        }
    }

[1m  # module.redshift.aws_redshiftserverless_snapshot.main[0m will be created
[0m  [32m+[0m[0m resource "aws_redshiftserverless_snapshot" "main" {
      [32m+[0m[0m accounts_with_provisioned_restore_access = (known after apply)
      [32m+[0m[0m accounts_with_restore_access             = (known after apply)
      [32m+[0m[0m admin_username                           = (known after apply)
      [32m+[0m[0m arn                                      = (known after apply)
      [32m+[0m[0m id                                       = (known after apply)
      [32m+[0m[0m kms_key_id                               = (known after apply)
      [32m+[0m[0m namespace_arn                            = (known after apply)
      [32m+[0m[0m namespace_name                           = "dwh"
      [32m+[0m[0m owner_account                            = (known after apply)
      [32m+[0m[0m retention_period                         = 7
      [32m+[0m[0m snapshot_name                            = "dwh-snapshot"
    }

[1m  # module.redshift.aws_redshiftserverless_workgroup.main[0m will be created
[0m  [32m+[0m[0m resource "aws_redshiftserverless_workgroup" "main" {
      [32m+[0m[0m arn                  = (known after apply)
      [32m+[0m[0m base_capacity        = 16
      [32m+[0m[0m endpoint             = (known after apply)
      [32m+[0m[0m enhanced_vpc_routing = true
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m namespace_name       = (known after apply)
      [32m+[0m[0m port                 = (known after apply)
      [32m+[0m[0m publicly_accessible  = false
      [32m+[0m[0m security_group_ids   = (known after apply)
      [32m+[0m[0m subnet_ids           = (known after apply)
      [32m+[0m[0m tags                 = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m tags_all             = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m workgroup_id         = (known after apply)
      [32m+[0m[0m workgroup_name       = "main-workgroup"

      [32m+[0m[0m config_parameter {
          [32m+[0m[0m parameter_key   = "enable_user_activity_logging"
          [32m+[0m[0m parameter_value = "true"
        }
      [32m+[0m[0m config_parameter {
          [32m+[0m[0m parameter_key   = "max_query_execution_time"
          [32m+[0m[0m parameter_value = "86400000"
        }
      [32m+[0m[0m config_parameter {
          [32m+[0m[0m parameter_key   = "max_query_queue_time"
          [32m+[0m[0m parameter_value = "3600000"
        }
      [32m+[0m[0m config_parameter {
          [32m+[0m[0m parameter_key   = "query_group"
          [32m+[0m[0m parameter_value = "default"
        }
      [32m+[0m[0m config_parameter {
          [32m+[0m[0m parameter_key   = "require_ssl"
          [32m+[0m[0m parameter_value = "true"
        }

      [32m+[0m[0m price_performance_target (known after apply)
    }

[1m  # module.security.aws_iam_user.infra_admin[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_user" "infra_admin" {
      [32m+[0m[0m arn           = (known after apply)
      [32m+[0m[0m force_destroy = false
      [32m+[0m[0m id            = (known after apply)
      [32m+[0m[0m name          = "infra_admin"
      [32m+[0m[0m path          = "/"
      [32m+[0m[0m tags_all      = (known after apply)
      [32m+[0m[0m unique_id     = (known after apply)
    }

[1m  # module.security.aws_iam_user_policy_attachment.infra_admin_admin_policy[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_user_policy_attachment" "infra_admin_admin_policy" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AdministratorAccess"
      [32m+[0m[0m user       = "infra_admin"
    }

[1m  # module.security.aws_kms_alias.logs[0m will be created
[0m  [32m+[0m[0m resource "aws_kms_alias" "logs" {
      [32m+[0m[0m arn            = (known after apply)
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m name           = "alias/logs-key"
      [32m+[0m[0m name_prefix    = (known after apply)
      [32m+[0m[0m target_key_arn = (known after apply)
      [32m+[0m[0m target_key_id  = (known after apply)
    }

[1m  # module.security.aws_kms_alias.redshift[0m will be created
[0m  [32m+[0m[0m resource "aws_kms_alias" "redshift" {
      [32m+[0m[0m arn            = (known after apply)
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m name           = "alias/redshift-key"
      [32m+[0m[0m name_prefix    = (known after apply)
      [32m+[0m[0m target_key_arn = (known after apply)
      [32m+[0m[0m target_key_id  = (known after apply)
    }

[1m  # module.security.aws_kms_key.logs[0m will be created
[0m  [32m+[0m[0m resource "aws_kms_key" "logs" {
      [32m+[0m[0m arn                                = (known after apply)
      [32m+[0m[0m bypass_policy_lockout_safety_check = false
      [32m+[0m[0m customer_master_key_spec           = "SYMMETRIC_DEFAULT"
      [32m+[0m[0m deletion_window_in_days            = 7
      [32m+[0m[0m description                        = "KMS key for CloudWatch Logs encryption"
      [32m+[0m[0m enable_key_rotation                = true
      [32m+[0m[0m id                                 = (known after apply)
      [32m+[0m[0m is_enabled                         = true
      [32m+[0m[0m key_id                             = (known after apply)
      [32m+[0m[0m key_usage                          = "ENCRYPT_DECRYPT"
      [32m+[0m[0m multi_region                       = (known after apply)
      [32m+[0m[0m policy                             = (known after apply)
      [32m+[0m[0m rotation_period_in_days            = (known after apply)
      [32m+[0m[0m tags                               = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "logs-kms-key"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m tags_all                           = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "logs-kms-key"
          [32m+[0m[0m "Terraform"   = "true"
        }
    }

[1m  # module.security.aws_kms_key.redshift[0m will be created
[0m  [32m+[0m[0m resource "aws_kms_key" "redshift" {
      [32m+[0m[0m arn                                = (known after apply)
      [32m+[0m[0m bypass_policy_lockout_safety_check = false
      [32m+[0m[0m customer_master_key_spec           = "SYMMETRIC_DEFAULT"
      [32m+[0m[0m deletion_window_in_days            = 7
      [32m+[0m[0m description                        = "KMS key for Redshift encryption"
      [32m+[0m[0m enable_key_rotation                = true
      [32m+[0m[0m id                                 = (known after apply)
      [32m+[0m[0m is_enabled                         = true
      [32m+[0m[0m key_id                             = (known after apply)
      [32m+[0m[0m key_usage                          = "ENCRYPT_DECRYPT"
      [32m+[0m[0m multi_region                       = (known after apply)
      [32m+[0m[0m policy                             = (known after apply)
      [32m+[0m[0m rotation_period_in_days            = (known after apply)
      [32m+[0m[0m tags                               = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "redshift-kms-key"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m tags_all                           = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "redshift-kms-key"
          [32m+[0m[0m "Terraform"   = "true"
        }
    }

[1m  # module.security.aws_secretsmanager_secret.db1_credentials[0m will be created
[0m  [32m+[0m[0m resource "aws_secretsmanager_secret" "db1_credentials" {
      [32m+[0m[0m arn                            = (known after apply)
      [32m+[0m[0m description                    = "Credenciales para la base de datos DB1"
      [32m+[0m[0m force_overwrite_replica_secret = false
      [32m+[0m[0m id                             = (known after apply)
      [32m+[0m[0m name                           = "db1-credentials"
      [32m+[0m[0m name_prefix                    = (known after apply)
      [32m+[0m[0m policy                         = (known after apply)
      [32m+[0m[0m recovery_window_in_days        = 30
      [32m+[0m[0m tags                           = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m tags_all                       = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Terraform"   = "true"
        }

      [32m+[0m[0m replica (known after apply)
    }

[1m  # module.security.aws_secretsmanager_secret.db2_credentials[0m will be created
[0m  [32m+[0m[0m resource "aws_secretsmanager_secret" "db2_credentials" {
      [32m+[0m[0m arn                            = (known after apply)
      [32m+[0m[0m description                    = "Credenciales para la base de datos DB2"
      [32m+[0m[0m force_overwrite_replica_secret = false
      [32m+[0m[0m id                             = (known after apply)
      [32m+[0m[0m name                           = "db2-credentials"
      [32m+[0m[0m name_prefix                    = (known after apply)
      [32m+[0m[0m policy                         = (known after apply)
      [32m+[0m[0m recovery_window_in_days        = 30
      [32m+[0m[0m tags                           = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m tags_all                       = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Terraform"   = "true"
        }

      [32m+[0m[0m replica (known after apply)
    }

[1m  # module.security.aws_secretsmanager_secret.redshift_admin[0m will be created
[0m  [32m+[0m[0m resource "aws_secretsmanager_secret" "redshift_admin" {
      [32m+[0m[0m arn                            = (known after apply)
      [32m+[0m[0m force_overwrite_replica_secret = false
      [32m+[0m[0m id                             = (known after apply)
      [32m+[0m[0m kms_key_id                     = (known after apply)
      [32m+[0m[0m name                           = "redshift-admin-credentials"
      [32m+[0m[0m name_prefix                    = (known after apply)
      [32m+[0m[0m policy                         = (known after apply)
      [32m+[0m[0m recovery_window_in_days        = 0
      [32m+[0m[0m tags                           = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "redshift-admin-secret"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m tags_all                       = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "redshift-admin-secret"
          [32m+[0m[0m "Terraform"   = "true"
        }

      [32m+[0m[0m replica (known after apply)
    }

[1m  # module.security.aws_secretsmanager_secret_version.db1_credentials[0m will be created
[0m  [32m+[0m[0m resource "aws_secretsmanager_secret_version" "db1_credentials" {
      [32m+[0m[0m arn                  = (known after apply)
      [32m+[0m[0m has_secret_string_wo = (known after apply)
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m secret_id            = (known after apply)
      [32m+[0m[0m secret_string        = (sensitive value)
      [32m+[0m[0m secret_string_wo     = (write-only attribute)
      [32m+[0m[0m version_id           = (known after apply)
      [32m+[0m[0m version_stages       = (known after apply)
    }

[1m  # module.security.aws_secretsmanager_secret_version.db2_credentials[0m will be created
[0m  [32m+[0m[0m resource "aws_secretsmanager_secret_version" "db2_credentials" {
      [32m+[0m[0m arn                  = (known after apply)
      [32m+[0m[0m has_secret_string_wo = (known after apply)
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m secret_id            = (known after apply)
      [32m+[0m[0m secret_string        = (sensitive value)
      [32m+[0m[0m secret_string_wo     = (write-only attribute)
      [32m+[0m[0m version_id           = (known after apply)
      [32m+[0m[0m version_stages       = (known after apply)
    }

[1m  # module.security.aws_secretsmanager_secret_version.redshift_admin[0m will be created
[0m  [32m+[0m[0m resource "aws_secretsmanager_secret_version" "redshift_admin" {
      [32m+[0m[0m arn                  = (known after apply)
      [32m+[0m[0m has_secret_string_wo = (known after apply)
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m secret_id            = (known after apply)
      [32m+[0m[0m secret_string        = (sensitive value)
      [32m+[0m[0m secret_string_wo     = (write-only attribute)
      [32m+[0m[0m version_id           = (known after apply)
      [32m+[0m[0m version_stages       = (known after apply)
    }

[1m  # module.security.aws_security_group.glue[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "glue" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "Security group for AWS Glue"
      [32m+[0m[0m egress                 = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "10.0.0.0/16",
                ]
              [32m+[0m[0m description      = "Allow outbound traffic to VPC"
              [32m+[0m[0m from_port        = 0
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "-1"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 0
            },
        ]
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "10.0.0.0/16",
                ]
              [32m+[0m[0m description      = "Allow inbound traffic from VPC"
              [32m+[0m[0m from_port        = 0
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "-1"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 0
            },
        ]
      [32m+[0m[0m name                   = "glue-security-group"
      [32m+[0m[0m name_prefix            = (known after apply)
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "glue-security-group"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "glue-security-group"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m vpc_id                 = (known after apply)
    }

[1m  # module.security.random_password.redshift_password[0m will be created
[0m  [32m+[0m[0m resource "random_password" "redshift_password" {
      [32m+[0m[0m bcrypt_hash      = (sensitive value)
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m length           = 16
      [32m+[0m[0m lower            = true
      [32m+[0m[0m min_lower        = 0
      [32m+[0m[0m min_numeric      = 0
      [32m+[0m[0m min_special      = 0
      [32m+[0m[0m min_upper        = 0
      [32m+[0m[0m number           = true
      [32m+[0m[0m numeric          = true
      [32m+[0m[0m override_special = "!#$%&*()-_=+[]{}<>:?"
      [32m+[0m[0m result           = (sensitive value)
      [32m+[0m[0m special          = true
      [32m+[0m[0m upper            = true
    }

[1m  # module.staging.aws_cloudwatch_metric_alarm.s3_objects[0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_metric_alarm" "s3_objects" {
      [32m+[0m[0m actions_enabled                       = true
      [32m+[0m[0m alarm_actions                         = (known after apply)
      [32m+[0m[0m alarm_description                     = "Alarma cuando el número de objetos en el bucket de staging excede 100,000"
      [32m+[0m[0m alarm_name                            = "staging-bucket-objects"
      [32m+[0m[0m arn                                   = (known after apply)
      [32m+[0m[0m comparison_operator                   = "GreaterThanThreshold"
      [32m+[0m[0m dimensions                            = (known after apply)
      [32m+[0m[0m evaluate_low_sample_count_percentiles = (known after apply)
      [32m+[0m[0m evaluation_periods                    = 1
      [32m+[0m[0m id                                    = (known after apply)
      [32m+[0m[0m metric_name                           = "NumberOfObjects"
      [32m+[0m[0m namespace                             = "AWS/S3"
      [32m+[0m[0m ok_actions                            = (known after apply)
      [32m+[0m[0m period                                = 86400
      [32m+[0m[0m statistic                             = "Average"
      [32m+[0m[0m tags                                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m tags_all                              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m threshold                             = 100000
      [32m+[0m[0m treat_missing_data                    = "missing"
    }

[1m  # module.staging.aws_cloudwatch_metric_alarm.s3_size[0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_metric_alarm" "s3_size" {
      [32m+[0m[0m actions_enabled                       = true
      [32m+[0m[0m alarm_actions                         = (known after apply)
      [32m+[0m[0m alarm_description                     = "Alarma cuando el tamaño del bucket de staging excede 10 GB"
      [32m+[0m[0m alarm_name                            = "staging-bucket-size"
      [32m+[0m[0m arn                                   = (known after apply)
      [32m+[0m[0m comparison_operator                   = "GreaterThanThreshold"
      [32m+[0m[0m dimensions                            = (known after apply)
      [32m+[0m[0m evaluate_low_sample_count_percentiles = (known after apply)
      [32m+[0m[0m evaluation_periods                    = 1
      [32m+[0m[0m id                                    = (known after apply)
      [32m+[0m[0m metric_name                           = "BucketSizeBytes"
      [32m+[0m[0m namespace                             = "AWS/S3"
      [32m+[0m[0m ok_actions                            = (known after apply)
      [32m+[0m[0m period                                = 86400
      [32m+[0m[0m statistic                             = "Average"
      [32m+[0m[0m tags                                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m tags_all                              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m threshold                             = 10737418240
      [32m+[0m[0m treat_missing_data                    = "missing"
    }

[1m  # module.staging.aws_iam_role.step_functions[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "step_functions" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "states.amazonaws.com"
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "step-functions-etl-role"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m unique_id             = (known after apply)

      [32m+[0m[0m inline_policy (known after apply)
    }

[1m  # module.staging.aws_iam_role_policy.step_functions[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy" "step_functions" {
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = "step-functions-etl-policy"
      [32m+[0m[0m name_prefix = (known after apply)
      [32m+[0m[0m policy      = (known after apply)
      [32m+[0m[0m role        = (known after apply)
    }

[1m  # module.staging.aws_s3_bucket.main[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket" "main" {
      [32m+[0m[0m acceleration_status         = (known after apply)
      [32m+[0m[0m acl                         = (known after apply)
      [32m+[0m[0m arn                         = (known after apply)
      [32m+[0m[0m bucket                      = (known after apply)
      [32m+[0m[0m bucket_domain_name          = (known after apply)
      [32m+[0m[0m bucket_prefix               = (known after apply)
      [32m+[0m[0m bucket_regional_domain_name = (known after apply)
      [32m+[0m[0m force_destroy               = false
      [32m+[0m[0m hosted_zone_id              = (known after apply)
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m object_lock_enabled         = (known after apply)
      [32m+[0m[0m policy                      = (known after apply)
      [32m+[0m[0m region                      = (known after apply)
      [32m+[0m[0m request_payer               = (known after apply)
      [32m+[0m[0m tags_all                    = (known after apply)
      [32m+[0m[0m website_domain              = (known after apply)
      [32m+[0m[0m website_endpoint            = (known after apply)

      [32m+[0m[0m cors_rule (known after apply)

      [32m+[0m[0m grant (known after apply)

      [32m+[0m[0m lifecycle_rule (known after apply)

      [32m+[0m[0m logging (known after apply)

      [32m+[0m[0m object_lock_configuration (known after apply)

      [32m+[0m[0m replication_configuration (known after apply)

      [32m+[0m[0m server_side_encryption_configuration (known after apply)

      [32m+[0m[0m versioning (known after apply)

      [32m+[0m[0m website (known after apply)
    }

[1m  # module.staging.aws_s3_bucket_lifecycle_configuration.staging[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_lifecycle_configuration" "staging" {
      [32m+[0m[0m bucket                                 = (known after apply)
      [32m+[0m[0m expected_bucket_owner                  = (known after apply)
      [32m+[0m[0m id                                     = (known after apply)
      [32m+[0m[0m transition_default_minimum_object_size = "all_storage_classes_128K"

      [32m+[0m[0m rule {
          [32m+[0m[0m id     = "retention-policy"
          [32m+[0m[0m status = "Enabled"
            [90m# (1 unchanged attribute hidden)[0m[0m

          [32m+[0m[0m abort_incomplete_multipart_upload {
              [32m+[0m[0m days_after_initiation = 7
            }

          [32m+[0m[0m expiration {
              [32m+[0m[0m days                         = 30
              [32m+[0m[0m expired_object_delete_marker = false
            }

          [32m+[0m[0m filter {
              [32m+[0m[0m prefix = "staging/"
            }

          [32m+[0m[0m noncurrent_version_expiration {
              [32m+[0m[0m noncurrent_days = 7
            }
        }
    }

[1m  # module.staging.aws_s3_bucket_policy.glue_access[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_policy" "glue_access" {
      [32m+[0m[0m bucket = (known after apply)
      [32m+[0m[0m id     = (known after apply)
      [32m+[0m[0m policy = (known after apply)
    }

[1m  # module.staging.aws_s3_bucket_server_side_encryption_configuration.main[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_server_side_encryption_configuration" "main" {
      [32m+[0m[0m bucket = (known after apply)
      [32m+[0m[0m id     = (known after apply)

      [32m+[0m[0m rule {
          [32m+[0m[0m apply_server_side_encryption_by_default {
              [32m+[0m[0m kms_master_key_id = (known after apply)
              [32m+[0m[0m sse_algorithm     = "aws:kms"
            }
        }
    }

[1m  # module.staging.aws_s3_bucket_versioning.main[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_versioning" "main" {
      [32m+[0m[0m bucket = (known after apply)
      [32m+[0m[0m id     = (known after apply)

      [32m+[0m[0m versioning_configuration {
          [32m+[0m[0m mfa_delete = (known after apply)
          [32m+[0m[0m status     = "Enabled"
        }
    }

[1m  # module.staging.aws_sfn_state_machine.etl_orchestration[0m will be created
[0m  [32m+[0m[0m resource "aws_sfn_state_machine" "etl_orchestration" {
      [32m+[0m[0m arn                       = (known after apply)
      [32m+[0m[0m creation_date             = (known after apply)
      [32m+[0m[0m definition                = (known after apply)
      [32m+[0m[0m description               = (known after apply)
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m name                      = "etl-orchestration"
      [32m+[0m[0m name_prefix               = (known after apply)
      [32m+[0m[0m publish                   = false
      [32m+[0m[0m revision_id               = (known after apply)
      [32m+[0m[0m role_arn                  = (known after apply)
      [32m+[0m[0m state_machine_version_arn = (known after apply)
      [32m+[0m[0m status                    = (known after apply)
      [32m+[0m[0m tags                      = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m tags_all                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m type                      = "STANDARD"
      [32m+[0m[0m version_description       = (known after apply)

      [32m+[0m[0m encryption_configuration (known after apply)

      [32m+[0m[0m logging_configuration (known after apply)

      [32m+[0m[0m tracing_configuration (known after apply)
    }

[1m  # module.staging.aws_sns_topic.alerts[0m will be created
[0m  [32m+[0m[0m resource "aws_sns_topic" "alerts" {
      [32m+[0m[0m arn                         = (known after apply)
      [32m+[0m[0m beginning_archive_time      = (known after apply)
      [32m+[0m[0m content_based_deduplication = false
      [32m+[0m[0m fifo_topic                  = false
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m kms_master_key_id           = (known after apply)
      [32m+[0m[0m name                        = "staging-alerts"
      [32m+[0m[0m name_prefix                 = (known after apply)
      [32m+[0m[0m owner                       = (known after apply)
      [32m+[0m[0m policy                      = (known after apply)
      [32m+[0m[0m signature_version           = (known after apply)
      [32m+[0m[0m tags                        = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m tags_all                    = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m tracing_config              = (known after apply)
    }

[1m  # module.staging.random_string.bucket_suffix[0m will be created
[0m  [32m+[0m[0m resource "random_string" "bucket_suffix" {
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m length      = 8
      [32m+[0m[0m lower       = true
      [32m+[0m[0m min_lower   = 0
      [32m+[0m[0m min_numeric = 0
      [32m+[0m[0m min_special = 0
      [32m+[0m[0m min_upper   = 0
      [32m+[0m[0m number      = true
      [32m+[0m[0m numeric     = true
      [32m+[0m[0m result      = (known after apply)
      [32m+[0m[0m special     = false
      [32m+[0m[0m upper       = false
    }

[1mPlan:[0m 58 to add, 0 to change, 0 to destroy.
[0m
Changes to Outputs:
  [32m+[0m[0m bucket_name               = (known after apply)
  [32m+[0m[0m glue_crawler_name         = "redshift-crawler"
  [32m+[0m[0m glue_job_name             = "redshift-etl"
  [32m+[0m[0m logs_kms_key_arn          = (known after apply)
  [32m+[0m[0m redshift_admin_secret_arn = (known after apply)
  [32m+[0m[0m redshift_endpoint         = (known after apply)
  [32m+[0m[0m redshift_kms_key_arn      = (known after apply)
  [32m+[0m[0m redshift_workgroup_id     = (known after apply)
  [32m+[0m[0m subnet_id                 = (known after apply)
  [32m+[0m[0m vpc_id                    = (known after apply)
[90m
─────────────────────────────────────────────────────────────────────────────[0m

Note: You didn't use the -out option to save this plan, so Terraform can't
guarantee to take exactly these actions if you run "terraform apply" now.
